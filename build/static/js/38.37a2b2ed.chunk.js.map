{"version":3,"file":"static/js/38.37a2b2ed.chunk.js","mappings":"oIACA,QAA0B,yBAA1B,EAAkE,8BAAlE,EAA4I,0BAA5I,EAAoL,6BCApL,GAAgB,QAAU,4BAA4B,aAAe,iCAAiC,OAAS,4B,uBCI/G,MASA,EATyCA,IAAiB,IAAhB,GAACC,EAAE,KAAEC,GAAKF,EAC/CG,EAAO,YAAcF,EACzB,OACCG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAOC,OAAS,IAAMD,EAAOE,OAAOC,UACnDL,EAAAA,EAAAA,KAACM,EAAAA,GAAO,CAACC,GAAIR,EAAKM,SAAEP,KACf,ECTR,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,2BCO5I,EAJuCF,IAAgB,IAAf,QAACY,GAAQZ,EAChD,OAAOI,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAOM,QAAQH,SAAEG,GAAc,E,6FCavD,MAiCMC,EAAgDb,IAAiB,IAAhB,SAACc,GAASd,EAChE,OACCI,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CACNC,cAAe,CAACC,eAAgB,IAChCH,SAAUA,CAACI,EAAMC,KAAmB,IAAjB,UAACC,GAAUD,EAC7BL,EAASI,EAAOD,gBAChBG,GAAW,EACVX,SAEDY,IAAA,IAAC,aAACC,EAAY,OAAEC,EAAM,QAAEC,GAAQH,EAAA,OAChCI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACZ,SAAUQ,EACVK,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,IAAK,OAAQC,SAAU,SAAStB,SAAA,EACvFL,EAAAA,EAAAA,KAAC4B,EAAAA,GAAK,CACLC,GAAIC,EAAAA,EAAMC,SACVjC,KAAK,iBACLG,UAAWkB,EAAON,gBAAkBO,EAAQP,eAAiBX,EAAqB,GAClF8B,YAAY,qBACZC,SAAU,CAACC,QAAS,EAAGC,QAAS,IAChCC,UAAUC,EAAAA,EAAAA,IAAkBC,EAAAA,IAAUC,EAAAA,EAAAA,IAAU,KAAKC,EAAAA,EAAAA,IAAU,IAC/DC,OAAQtB,EAAON,gBAAkBO,EAAQP,eAAiB,QAAU,MAErEb,EAAAA,EAAAA,KAAC0C,EAAAA,GAAY,CAAC5C,KAAK,iBAAgBO,SACjCsC,IAAO3C,EAAAA,EAAAA,KAAA,OAAKuB,MAAO,CAACqB,MAAO,OAAOvC,SAAEsC,OAGtC3C,EAAAA,EAAAA,KAAC6C,EAAAA,GAAM,CAACC,KAAK,UAAUC,SAAS,SAASxB,MAAO,CAACyB,UAAW,cAAc3C,SAAC,kBAGrE,GAEA,EAMX,GAF8B4C,EAAAA,EAAAA,IAAQC,EAAAA,EAARD,EAnEUE,KACvC,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAGvBC,GAFUF,EAAAA,EAAAA,IAAYG,EAAAA,GAEIC,KAC/BxD,IAAUH,EAAAA,EAAAA,KAAC4D,EAAU,CAAiB9D,KAAMK,EAAOL,KAAMD,GAAIM,EAAON,IAAzCM,EAAON,MAE7BgE,EAAmBP,EAASK,KACjCnD,IAAWR,EAAAA,EAAAA,KAAC8D,EAAO,CAAkBtD,QAASA,EAAQA,QAASX,GAAIW,EAAQX,IAAlDW,EAAQX,MAOlC,OACCwB,EAAAA,EAAAA,MAAA,OAAKpB,UAAWC,EAAeG,SAAA,EAC9BL,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAoBG,SAClCoD,KAEFpC,EAAAA,EAAAA,MAAA,OAAKpB,UAAWC,EAAgBG,SAAA,CAC9BwD,GACD7D,EAAAA,EAAAA,KAACS,EAAc,CAACC,SAXIF,IACtB4C,GAASW,EAAAA,EAAAA,IAAWvD,GAAS,SAYvB,G","sources":["webpack://upto30/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://upto30/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://upto30/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"errorBorder\":\"Dialogs_errorBorder__Taamf\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogItem_dialogs__pxrq6\",\"dialogsItems\":\"DialogItem_dialogsItems__ReLAZ\",\"active\":\"DialogItem_active__wvgh9\"};","import styles from './DialogItem.module.css'\nimport {NavLink} from 'react-router-dom'\nimport {DialogType} from '../../../types'\nimport React from 'react'\n\nconst DialogItem: React.FC<DialogType> = ({id, name}) => {\n\tlet path = '/dialogs/' + id\n\treturn (\n\t\t<div className={styles.dialog + ' ' + styles.active}>\n\t\t\t<NavLink to={path}>{name}</NavLink>\n\t\t</div>\n\t)\n}\n\nexport default DialogItem\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Message_dialogs__qitON\",\"dialogsItems\":\"Message_dialogsItems__0JklN\",\"active\":\"Message_active__NUbix\",\"messages\":\"Message_messages__eByBY\"};","import React from 'react'\nimport styles from './Message.module.css'\nimport {MessageType} from '../../../types'\n\nconst Message: React.FC<MessageType> = ({message}) => {\n\treturn <div className={styles.message}>{message}</div>\n}\n\nexport default Message","import React from 'react'\nimport styles from './Dialogs.module.css'\nimport DialogItem from './DialogItem/DialogItem'\nimport Message from './Message/Message'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {selectDialogs} from '../../store/dialogsSlice'\nimport {\n\taddMessage,\n\tselectMessages\n} from '../../store/messageSlice'\nimport WithAuthRedirect from '../../hoc/WithAuthRedirect'\nimport {compose} from '@reduxjs/toolkit'\nimport {ErrorMessage, Field, Form, Formik} from 'formik'\nimport {composeValidators, maxLength, minLength, required} from '../../utils/validators/validators'\nimport {Button, Input} from 'antd'\n\ntype DialogsProps = {}\n\nconst Dialogs: React.FC<DialogsProps> = () => {\n\tconst dispatch = useDispatch()\n\tconst messages = useSelector(selectMessages)\n\tconst dialogs = useSelector(selectDialogs)\n\n\tconst dialogsElements = dialogs.map(\n\t\tdialog => <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>\n\t)\n\tconst messagesElements = messages.map(\n\t\tmessage => <Message key={message.id} message={message.message} id={message.id}/>\n\t)\n\n\tconst addNewMessage = (message: string) => {\n\t\tdispatch(addMessage(message))\n\t}\n\n\treturn (\n\t\t<div className={styles.dialogs}>\n\t\t\t<div className={styles.dialogsItems}>\n\t\t\t\t{dialogsElements}\n\t\t\t</div>\n\t\t\t<div className={styles.messages}>\n\t\t\t\t{messagesElements}\n\t\t\t\t<AddMessageForm onSubmit={addNewMessage}/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\ninterface AddMessageFormProps {\n\tonSubmit: (message: string) => void\n}\n\nconst AddMessageForm: React.FC<AddMessageFormProps> = ({onSubmit}) => {\n\treturn (\n\t\t<Formik\n\t\t\tinitialValues={{newMessageBody: ''}}\n\t\t\tonSubmit={(values, {resetForm}) => {\n\t\t\t\tonSubmit(values.newMessageBody)\n\t\t\t\tresetForm()\n\t\t\t}}\n\t\t>\n\t\t\t{({handleSubmit, errors, touched}) => (\n\t\t\t\t<Form onSubmit={handleSubmit}\n\t\t\t\t      style={{display: 'flex', flexDirection: 'column', gap: '10px', maxWidth: '300px'}}>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tas={Input.TextArea}\n\t\t\t\t\t\tname=\"newMessageBody\"\n\t\t\t\t\t\tclassName={errors.newMessageBody && touched.newMessageBody ? styles.errorBorder : ''}\n\t\t\t\t\t\tplaceholder=\"Enter your message\"\n\t\t\t\t\t\tautoSize={{minRows: 3, maxRows: 15}}\n\t\t\t\t\t\tvalidate={composeValidators(required, maxLength(50), minLength(2))}\n\t\t\t\t\t\tstatus={errors.newMessageBody && touched.newMessageBody ? 'error' : ''}\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorMessage name=\"newMessageBody\">\n\t\t\t\t\t\t{msg => <div style={{color: 'red'}}>{msg}</div>}\n\t\t\t\t\t</ErrorMessage>\n\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\" style={{alignSelf: 'flex-start'}}>\n\t\t\t\t\t\tAdd message\n\t\t\t\t\t</Button>\n\t\t\t\t</Form>\n\t\t\t)}\n\t\t</Formik>\n\t)\n}\n\nconst AuthRedirectComponent = compose(WithAuthRedirect)(Dialogs)\n\nexport default AuthRedirectComponent\n"],"names":["_ref","id","name","path","_jsx","className","styles","dialog","active","children","NavLink","to","message","AddMessageForm","onSubmit","Formik","initialValues","newMessageBody","values","_ref2","resetForm","_ref3","handleSubmit","errors","touched","_jsxs","Form","style","display","flexDirection","gap","maxWidth","Field","as","Input","TextArea","placeholder","autoSize","minRows","maxRows","validate","composeValidators","required","maxLength","minLength","status","ErrorMessage","msg","color","Button","type","htmlType","alignSelf","compose","WithAuthRedirect","Dialogs","dispatch","useDispatch","messages","useSelector","selectMessages","dialogsElements","selectDialogs","map","DialogItem","messagesElements","Message","addMessage"],"sourceRoot":""}