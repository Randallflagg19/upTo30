{"version":3,"file":"static/js/247.f2eedca6.chunk.js","mappings":"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","sources":["components/Login/LoginSchema.ts","components/Login/LoginForm.tsx","webpack://upto30/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx"],"sourcesContent":["import * as Yup from 'yup'\n\nexport const validationSchema = Yup.object({\n\temail: Yup.string()\n\t\t.min(2, 'Минимум 2 символа')\n\t\t.max(50, 'Максимум 50 символов')\n\t\t.required('Обязательное поле'),\n\tpassword: Yup.string()\n\t\t.min(2, 'Минимум 2 символа')\n\t\t.max(50, 'Максимум 50 символов')\n\t\t.required('Обязательное поле'),\n\tcaptcha: Yup.string().when('captchaURL', {\n\t\tis: (captchaURL: string | undefined) => !!captchaURL, // Проверяем наличие captchaURL\n\t\tthen: (schema) => schema.required('Обязательное поле'), // Если есть, делаем обязательным\n\t\totherwise: (schema) => schema.notRequired() // Если нет, делаем необязательным\n\t})\n})","import React, {useState} from 'react'\nimport {ErrorMessage, Field, FieldInputProps, Form, Formik} from 'formik'\nimport {Button, Checkbox, Input} from 'antd'\nimport {loginThunk, selectCaptchaURL} from '../../store/authSlice'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppDispatch} from '../../store/store'\nimport {validationSchema} from './LoginSchema'\n\nexport const LoginForm = () => {\n\tconst dispatch = useDispatch<AppDispatch>()\n\tconst captchaURL = useSelector(selectCaptchaURL)\n\tconst [errorMessage, setErrorMessage] = useState<string | null>(null) // Локальное состояние ошибки\n\n\treturn (\n\t\t<Formik\n\t\t\tinitialValues={{email: '', password: '', rememberMe: false, captcha: ''}}\n\t\t\tvalidationSchema={validationSchema}\n\t\t\tonSubmit={async (values, {setSubmitting}) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait dispatch(loginThunk(values)).unwrap() // unwrap позволяет выбросить ошибку\n\t\t\t\t\tsetErrorMessage(null) // Сбрасываем ошибку при успешном логине\n\t\t\t\t}\n\t\t\t\tcatch (error) {\n\t\t\t\t\tsetErrorMessage(error as string) // Устанавливаем сообщение об ошибке\n\t\t\t\t} finally {\n\t\t\t\t\tsetSubmitting(false)\n\t\t\t\t}\n\t\t\t}}\n\t\t>\n\t\t\t{({errors, touched, isSubmitting}) => (\n\t\t\t\t<Form style={{display: 'flex', flexDirection: 'column', gap: '15px'}}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Field name=\"email\">\n\t\t\t\t\t\t\t{({field}: { field: FieldInputProps<string> }) => (\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\t\t\t\tstatus={errors.email && touched.email ? 'error' : ''}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Field>\n\t\t\t\t\t\t<ErrorMessage name=\"email\">\n\t\t\t\t\t\t\t{(msg) => <div style={{color: 'red'}}>{msg}</div>}\n\t\t\t\t\t\t</ErrorMessage>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Field name=\"password\">\n\t\t\t\t\t\t\t{({field}: { field: FieldInputProps<string> }) => (\n\t\t\t\t\t\t\t\t<Input.Password\n\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\t\t\tstatus={errors.password && touched.password ? 'error' : ''}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Field>\n\t\t\t\t\t\t<ErrorMessage name=\"password\">\n\t\t\t\t\t\t\t{(msg) => <div style={{color: 'red'}}>{msg}</div>}\n\t\t\t\t\t\t</ErrorMessage>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Field name=\"rememberMe\" type=\"checkbox\">\n\t\t\t\t\t\t\t{({field}: { field: FieldInputProps<string> }) => <Checkbox {...field}>Remember\n\t\t\t\t\t\t\t\tme</Checkbox>}\n\t\t\t\t\t\t</Field>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Отображение капчи */}\n\t\t\t\t\t{captchaURL && (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div style={{marginBottom: '10px'}}>\n\t\t\t\t\t\t\t\t<img src={captchaURL} alt=\"Captcha\"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Field name=\"captcha\">\n\t\t\t\t\t\t\t\t{({field}: { field: FieldInputProps<string> }) => (\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Введите капчу\"\n\t\t\t\t\t\t\t\t\t\tstatus={errors.captcha && touched.captcha ? 'error' : ''}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Field>\n\t\t\t\t\t\t\t<ErrorMessage name=\"captcha\">\n\t\t\t\t\t\t\t\t{(msg) => <div style={{color: 'red'}}>{msg}</div>}\n\t\t\t\t\t\t\t</ErrorMessage>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{/* Отображение ошибки */}\n\t\t\t\t\t{errorMessage && <div style={{color: 'red', marginBottom: '10px'}}>{errorMessage}</div>}\n\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\" loading={isSubmitting}>\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</Button>\n\t\t\t\t</Form>\n\t\t\t)}\n\t\t</Formik>\n\t)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"errorBorder\":\"Login_errorBorder__loxvS\",\"loginContainer\":\"Login_loginContainer__qMsVL\"};","import React from 'react'\nimport {selectIsAuth, selectIsAuthChecked} from '../../store/authSlice'\nimport {useSelector} from 'react-redux'\nimport {Navigate} from 'react-router-dom'\nimport {LoginForm} from './LoginForm'\nimport styles from './Login.module.css'\n\nconst Login = () => {\n\tconst isAuth = useSelector(selectIsAuth)\n\tconst isAuthChecked = useSelector(selectIsAuthChecked)\n\n\t// Пока не проверили авторизацию, не рендерим страницу\n\tif (!isAuthChecked) {\n\t\treturn null\n\t}\n\n\t// Если пользователь авторизован, редиректим его\n\tif (isAuth) {\n\t\treturn <Navigate to=\"/sn/profile\"/>\n\t}\n\n\t// Если пользователь не авторизован, рендерим страницу логина\n\treturn (\n\t\t<div className={styles.loginContainer}>\n\t\t\t<h1>Login</h1>\n\t\t\t<LoginForm/>\n\t\t</div>\n\t)\n}\n\nexport default Login\n"],"names":["validationSchema","Yup","email","min","max","required","password","captcha","when","is","captchaURL","then","schema","otherwise","notRequired","LoginForm","dispatch","useDispatch","useSelector","selectCaptchaURL","errorMessage","setErrorMessage","useState","_jsx","Formik","initialValues","rememberMe","onSubmit","async","values","_ref","setSubmitting","loginThunk","unwrap","error","children","_ref2","errors","touched","isSubmitting","_jsxs","Form","style","display","flexDirection","gap","Field","name","_ref3","field","Input","placeholder","status","ErrorMessage","msg","color","_ref4","Password","type","_ref5","Checkbox","marginBottom","src","alt","_ref6","Button","htmlType","loading","Login","isAuth","selectIsAuth","selectIsAuthChecked","Navigate","to","className","styles"],"sourceRoot":""}